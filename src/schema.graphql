type User{
    id:ID!
    name:String!
    email:String!
    links:[Link!]!
}
type AuthPayload {
    token:String
    user:User
}
type Query{
    feed(filter:String,skip:Int,take:Int,orderBy:LinkOrderByInput):Feed!
    link(id: ID!): Link
}

type Feed{
    links:[Link!]!
    count:Int!
}
type Vote{
    id:ID!
    link:Link!
    user:User!
}

type Mutation{
    post(url:String!,description:String!):Link!
    updatePost(id:ID!,url:String!,description:String!):Link
    deletePost(id:ID!):Link
    signUp(email:String!,name:String!,password:String!):AuthPayload
    logIn(email:String!,password:String!):AuthPayload
    vote(linkId:ID!):Vote
}

type Link{
    id:ID!
    description:String!
    url:String!
    postedBy:User!
    votes:[Vote!]!
}

type Subscription{
    newLink:Link
    newVote:Vote
}

enum Sort{
    asc
    desc
}
input LinkOrderByInput{
    createAt:Sort
    description:Sort
    url:Sort
}
